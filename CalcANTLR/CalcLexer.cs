//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: null
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR null /home/roman/FakeGames/Calc.g 2024-05-05 14:03:17

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


[System.CodeDom.Compiler.GeneratedCode("ANTLR", "null")]
[System.CLSCompliant(false)]
public partial class CalcLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__7=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int ID=4;
	public const int INT=5;
	public const int NEWLINE=6;

    // delegates
    // delegators

	public CalcLexer()
	{
		OnCreated();
	}

	public CalcLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CalcLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/home/roman/FakeGames/Calc.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__7() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__7() {}

    // $ANTLR start "T__7"
    [GrammarRule("T__7")]
    private void mT__7()
    {
    	EnterRule_T__7();
    	EnterRule("T__7", 1);
    	TraceIn("T__7", 1);
    		try
    		{
    		int _type = T__7;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:9:6: ( '(' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:9:8: '('
    		{
    		DebugLocation(9, 8);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__7", 1);
    		LeaveRule("T__7", 1);
    		LeaveRule_T__7();
        }
    }
    // $ANTLR end "T__7"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__8() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__8() {}

    // $ANTLR start "T__8"
    [GrammarRule("T__8")]
    private void mT__8()
    {
    	EnterRule_T__8();
    	EnterRule("T__8", 2);
    	TraceIn("T__8", 2);
    		try
    		{
    		int _type = T__8;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:10:6: ( ')' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:10:8: ')'
    		{
    		DebugLocation(10, 8);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__8", 2);
    		LeaveRule("T__8", 2);
    		LeaveRule_T__8();
        }
    }
    // $ANTLR end "T__8"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__9() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__9() {}

    // $ANTLR start "T__9"
    [GrammarRule("T__9")]
    private void mT__9()
    {
    	EnterRule_T__9();
    	EnterRule("T__9", 3);
    	TraceIn("T__9", 3);
    		try
    		{
    		int _type = T__9;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:11:6: ( '*' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:11:8: '*'
    		{
    		DebugLocation(11, 8);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__9", 3);
    		LeaveRule("T__9", 3);
    		LeaveRule_T__9();
        }
    }
    // $ANTLR end "T__9"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 4);
    	TraceIn("T__10", 4);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:12:7: ( '+' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:12:9: '+'
    		{
    		DebugLocation(12, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 4);
    		LeaveRule("T__10", 4);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 5);
    	TraceIn("T__11", 5);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:13:7: ( '-' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:13:9: '-'
    		{
    		DebugLocation(13, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 5);
    		LeaveRule("T__11", 5);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 6);
    	TraceIn("T__12", 6);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:14:7: ( '/' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:14:9: '/'
    		{
    		DebugLocation(14, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 6);
    		LeaveRule("T__12", 6);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 7);
    	TraceIn("T__13", 7);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:15:7: ( '=' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:15:9: '='
    		{
    		DebugLocation(15, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 7);
    		LeaveRule("T__13", 7);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 8);
    	TraceIn("ID", 8);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:10:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:10:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		{
    		DebugLocation(10, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(10, 31);
    		// /home/roman/FakeGames/Calc.g:10:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/roman/FakeGames/Calc.g:
    				{
    				DebugLocation(10, 31);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 8);
    		LeaveRule("ID", 8);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 9);
    	TraceIn("INT", 9);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:13:5: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:13:7: ( '0' .. '9' )+
    		{
    		DebugLocation(13, 7);
    		// /home/roman/FakeGames/Calc.g:13:7: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if (((LA2_1>='0' && LA2_1<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/roman/FakeGames/Calc.g:
    				{
    				DebugLocation(13, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 9);
    		LeaveRule("INT", 9);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 10);
    	TraceIn("NEWLINE", 10);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// /home/roman/FakeGames/Calc.g:26:9: ( ( '\\r' )? '\\n' )
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:26:11: ( '\\r' )? '\\n'
    		{
    		DebugLocation(26, 11);
    		// /home/roman/FakeGames/Calc.g:26:11: ( '\\r' )?
    		int alt3=2;
    		try { DebugEnterSubRule(3);
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		int LA3_1 = input.LA(1);

    		if ((LA3_1=='\r'))
    		{
    			alt3 = 1;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /home/roman/FakeGames/Calc.g:26:11: '\\r'
    			{
    			DebugLocation(26, 11);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(3); }

    		DebugLocation(26, 17);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 10);
    		LeaveRule("NEWLINE", 10);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    public override void mTokens()
    {
    	// /home/roman/FakeGames/Calc.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | ID | INT | NEWLINE )
    	int alt4=10;
    	try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    	switch (input.LA(1))
    	{
    	case '(':
    		{
    		alt4 = 1;
    		}
    		break;
    	case ')':
    		{
    		alt4 = 2;
    		}
    		break;
    	case '*':
    		{
    		alt4 = 3;
    		}
    		break;
    	case '+':
    		{
    		alt4 = 4;
    		}
    		break;
    	case '-':
    		{
    		alt4 = 5;
    		}
    		break;
    	case '/':
    		{
    		alt4 = 6;
    		}
    		break;
    	case '=':
    		{
    		alt4 = 7;
    		}
    		break;
    	case 'A':
    	case 'B':
    	case 'C':
    	case 'D':
    	case 'E':
    	case 'F':
    	case 'G':
    	case 'H':
    	case 'I':
    	case 'J':
    	case 'K':
    	case 'L':
    	case 'M':
    	case 'N':
    	case 'O':
    	case 'P':
    	case 'Q':
    	case 'R':
    	case 'S':
    	case 'T':
    	case 'U':
    	case 'V':
    	case 'W':
    	case 'X':
    	case 'Y':
    	case 'Z':
    	case '_':
    	case 'a':
    	case 'b':
    	case 'c':
    	case 'd':
    	case 'e':
    	case 'f':
    	case 'g':
    	case 'h':
    	case 'i':
    	case 'j':
    	case 'k':
    	case 'l':
    	case 'm':
    	case 'n':
    	case 'o':
    	case 'p':
    	case 'q':
    	case 'r':
    	case 's':
    	case 't':
    	case 'u':
    	case 'v':
    	case 'w':
    	case 'x':
    	case 'y':
    	case 'z':
    		{
    		alt4 = 8;
    		}
    		break;
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt4 = 9;
    		}
    		break;
    	case '\n':
    	case '\r':
    		{
    		alt4 = 10;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(4); }
    	switch (alt4)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// /home/roman/FakeGames/Calc.g:1:10: T__7
    		{
    		DebugLocation(1, 10);
    		mT__7(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// /home/roman/FakeGames/Calc.g:1:15: T__8
    		{
    		DebugLocation(1, 15);
    		mT__8(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// /home/roman/FakeGames/Calc.g:1:20: T__9
    		{
    		DebugLocation(1, 20);
    		mT__9(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// /home/roman/FakeGames/Calc.g:1:25: T__10
    		{
    		DebugLocation(1, 25);
    		mT__10(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// /home/roman/FakeGames/Calc.g:1:31: T__11
    		{
    		DebugLocation(1, 31);
    		mT__11(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// /home/roman/FakeGames/Calc.g:1:37: T__12
    		{
    		DebugLocation(1, 37);
    		mT__12(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// /home/roman/FakeGames/Calc.g:1:43: T__13
    		{
    		DebugLocation(1, 43);
    		mT__13(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// /home/roman/FakeGames/Calc.g:1:49: ID
    		{
    		DebugLocation(1, 49);
    		mID(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// /home/roman/FakeGames/Calc.g:1:52: INT
    		{
    		DebugLocation(1, 52);
    		mINT(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// /home/roman/FakeGames/Calc.g:1:56: NEWLINE
    		{
    		DebugLocation(1, 56);
    		mNEWLINE(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

